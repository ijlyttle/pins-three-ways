{
  "hash": "f49324f460b11c8104e4ff31e527ff05",
  "result": {
    "markdown": "---\nengine: knitr\n---\n\n\n# Using Python\n\nFor this chapter, I will use Python via R's reticulate package.\nAll code blocks that do not use Python will have a comment at the top, just like this one which uses R:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# r\nlibrary(\"reticulate\")\nuse_virtualenv(\"renv/python/virtualenvs/renv-python-3.10\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom pins import board_folder, board_urls\nfrom pyarrow import feather\nimport pandas as pd\n```\n:::\n\n\n## Folder board\n\n\n::: {.cell}\n\n```{.python .cell-code}\nboard_here = board_folder(\"pins\")\nboard_here.pin_list()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['penguins-csv', 'time-csv', 'penguins-arrow', 'time-arrow', 'time-json', 'penguins-json', 'pins.txt']\n```\n:::\n:::\n\n\nShould this be listing a test file?\n\n### Read\n\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins_csv = board_here.pin_read(\"penguins-csv\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins_csv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       species     island  bill_length_mm  ...  body_mass_g     sex  year\n0       Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1       Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2       Adelie  Torgersen            40.3  ...       3250.0  female  2007\n3       Adelie  Torgersen             NaN  ...          NaN     NaN  2007\n4       Adelie  Torgersen            36.7  ...       3450.0  female  2007\n..         ...        ...             ...  ...          ...     ...   ...\n339  Chinstrap      Dream            55.8  ...       4000.0    male  2009\n340  Chinstrap      Dream            43.5  ...       3400.0  female  2009\n341  Chinstrap      Dream            49.6  ...       3775.0    male  2009\n342  Chinstrap      Dream            50.8  ...       4100.0    male  2009\n343  Chinstrap      Dream            50.2  ...       3775.0  female  2009\n\n[344 rows x 8 columns]\n```\n:::\n:::\n\n\n\n### Timeseries\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntime_csv = board_here.pin_read(\"time-csv\")\ntime_csv\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          date             datetime  value\n0   2010-01-01  2020-09-01 00:00:00      0\n1   2010-01-02  2020-09-01 00:00:01      1\n2   2010-01-03  2020-09-01 00:00:02      2\n3   2010-01-04  2020-09-01 00:00:03      3\n4   2010-01-05  2020-09-01 00:00:04      4\n5   2010-01-06  2020-09-01 00:00:05      5\n6   2010-01-07  2020-09-01 00:00:06      6\n7   2010-01-08  2020-09-01 00:00:07      7\n8   2010-01-09  2020-09-01 00:00:08      8\n9   2010-01-10  2020-09-01 00:00:09      9\n10  2010-01-11  2020-09-01 00:00:10     10\n```\n:::\n\n```{.python .cell-code}\ntime_csv.dtypes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndate        object\ndatetime    object\nvalue        int64\ndtype: object\n```\n:::\n:::\n\n\nWe are not parsing dates or datetimes. We don't have the timezone.\n\nThere's no driver yet for JSON, so let's try Arrow:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# this seems hacky, but I'm sure it will get sorted out\ntime_arrow = pd.read_feather(board_here.pin_read(\"time-arrow\")[0])\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntime_arrow\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          date                  datetime  value\n0   2010-01-01 2020-09-01 00:00:00-06:00      0\n1   2010-01-02 2020-09-01 00:00:01-06:00      1\n2   2010-01-03 2020-09-01 00:00:02-06:00      2\n3   2010-01-04 2020-09-01 00:00:03-06:00      3\n4   2010-01-05 2020-09-01 00:00:04-06:00      4\n5   2010-01-06 2020-09-01 00:00:05-06:00      5\n6   2010-01-07 2020-09-01 00:00:06-06:00      6\n7   2010-01-08 2020-09-01 00:00:07-06:00      7\n8   2010-01-09 2020-09-01 00:00:08-06:00      8\n9   2010-01-10 2020-09-01 00:00:09-06:00      9\n10  2010-01-11 2020-09-01 00:00:10-06:00     10\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntime_arrow.dtypes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndate                                object\ndatetime    datetime64[ns, America/Denver]\nvalue                                int32\ndtype: object\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntime_arrow['date'].values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([datetime.date(2010, 1, 1), datetime.date(2010, 1, 2),\n       datetime.date(2010, 1, 3), datetime.date(2010, 1, 4),\n       datetime.date(2010, 1, 5), datetime.date(2010, 1, 6),\n       datetime.date(2010, 1, 7), datetime.date(2010, 1, 8),\n       datetime.date(2010, 1, 9), datetime.date(2010, 1, 10),\n       datetime.date(2010, 1, 11)], dtype=object)\n```\n:::\n:::\n\n\n## Remote board\n\nI don't think I will create a Python package; maybe I can just put together a quick script to convert a pins manafest into a dictionary.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport requests\nimport yaml\n\n# read file, parse into manifest\nurl_root = \"https://ijlyttle.github.io/pins-three-ways/pins\"\nreq = requests.get(f\"{url_root}/pins.txt\")\nmanifest = yaml.safe_load(req.text)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# use the most-recent version\npin_paths = {}\nfor key, value in manifest.items():\n    pin_paths[key] = max(value)\n \npin_paths   \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'penguins-arrow': 'penguins-arrow/20220811T170224Z-ef034/', 'penguins-csv': 'penguins-csv/20220811T170157Z-809e9/', 'penguins-json': 'penguins-json/20220811T170152Z-fa33e/', 'time-arrow': 'time-arrow/20220811T224202Z-b1900/', 'time-csv': 'time-csv/20220811T224202Z-06d53/', 'time-json': 'time-json/20220811T224202Z-70d59/'}\n```\n:::\n:::\n\n\nThe Python version has a board constructor `board_urls()`:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nboard_remote = board_urls(url_root, pin_paths)\nboard_remote.pin_list()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['penguins-arrow', 'penguins-csv', 'penguins-json', 'time-arrow', 'time-csv', 'time-json']\n```\n:::\n:::\n\n\n### Read\n\nWe can read the CSV pin:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nboard_remote.pin_read(\"penguins-csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       species     island  bill_length_mm  ...  body_mass_g     sex  year\n0       Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1       Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2       Adelie  Torgersen            40.3  ...       3250.0  female  2007\n3       Adelie  Torgersen             NaN  ...          NaN     NaN  2007\n4       Adelie  Torgersen            36.7  ...       3450.0  female  2007\n..         ...        ...             ...  ...          ...     ...   ...\n339  Chinstrap      Dream            55.8  ...       4000.0    male  2009\n340  Chinstrap      Dream            43.5  ...       3400.0  female  2009\n341  Chinstrap      Dream            49.6  ...       3775.0    male  2009\n342  Chinstrap      Dream            50.8  ...       4100.0    male  2009\n343  Chinstrap      Dream            50.2  ...       3775.0  female  2009\n\n[344 rows x 8 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins_arrow = pd.read_feather(board_here.pin_read(\"penguins-arrow\")[0])\npenguins_arrow\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       species     island  bill_length_mm  ...  body_mass_g     sex  year\n0       Adelie  Torgersen            39.1  ...       3750.0    male  2007\n1       Adelie  Torgersen            39.5  ...       3800.0  female  2007\n2       Adelie  Torgersen            40.3  ...       3250.0  female  2007\n3       Adelie  Torgersen             NaN  ...          NaN     NaN  2007\n4       Adelie  Torgersen            36.7  ...       3450.0  female  2007\n..         ...        ...             ...  ...          ...     ...   ...\n339  Chinstrap      Dream            55.8  ...       4000.0    male  2009\n340  Chinstrap      Dream            43.5  ...       3400.0  female  2009\n341  Chinstrap      Dream            49.6  ...       3775.0    male  2009\n342  Chinstrap      Dream            50.8  ...       4100.0    male  2009\n343  Chinstrap      Dream            50.2  ...       3775.0  female  2009\n\n[344 rows x 8 columns]\n```\n:::\n\n```{.python .cell-code}\npenguins_arrow.dtypes\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspecies              category\nisland               category\nbill_length_mm        float64\nbill_depth_mm         float64\nflipper_length_mm     float64\nbody_mass_g           float64\nsex                  category\nyear                    int32\ndtype: object\n```\n:::\n\n```{.python .cell-code}\npenguins_arrow['species'].values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Adelie', 'Adelie', 'Adelie', 'Adelie', 'Adelie', ..., 'Chinstrap', 'Chinstrap', 'Chinstrap', 'Chinstrap', 'Chinstrap']\nLength: 344\nCategories (3, object): ['Adelie', 'Chinstrap', 'Gentoo']\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}